// CMPE 365 Uber Project using dijkstra's algorithm
// By Wallis Pom - 15wp
import java.util.*; 
import java.lang.*; 
import java.io.*; 
  
class Uberclass 
{ 
    // Function to find vertex with minimum time
    // from set of nodes not included in shortest path tree yet
	
    static final int V=50; 
    static int minDistance(int dist[], Boolean sptSet[]) 
    { 
        // Initialize min value 
        int min = Integer.MAX_VALUE, min_index=-1; 
  
        for (int v = 0; v < V; v++) 
            if (sptSet[v] == false && dist[v] <= min) 
            { 
                min = dist[v]; 
                min_index = v; 
            } 
        return min_index; 
    } 
  
  
    // Function that implements Dijkstra's single source shortest time path 
    // This algorithm is for a graph represented using adjacency matrix 

    static int dijk(int graph[][], int starting, int destination) 
    { 
        int dist[] = new int[V]; // The output array. dist[i] will hold 
                                 // the shortest distance from starting to destination 
  
        // sptSet[i] will true if vertex i is included in shortest 
        // path tree or shortest distance from starting to destination is finalized 
        Boolean sptSet[] = new Boolean[V]; 
  
        
        // Initialize all times as infinite and set stpSet[] as false 
        for (int i = 0; i < V; i++) 
        { 
            dist[i] = Integer.MAX_VALUE; 
            sptSet[i] = false; 
        } 
  
        // time from pickup from source vertex from itself is 0
        dist[starting] = 0; 
  
        // Find fastest path for all nodes 
        for (int count = 0; count < V-1; count++) 
        { 
            // Pick the minimum path node from set of nodes
            // that are not yet used. u is always equal to starting in first 
            // iteration. 
            int u = minDistance(dist, sptSet); 
  
            // Mark the picked node as processed 
            sptSet[u] = true; 
  
            // Update dist value of the adjacent nodes of the picked node
            for (int v = 0; v < V; v++) 
  
                // Update dist[v] only if is not in sptSet, there is an 
                // edge from u to v, and total weight of path from starting to 
                // v through u is smaller than current value of dist[v] 
                if (!sptSet[v] && graph[u][v]!=0 && 
                        dist[u] != Integer.MAX_VALUE && 
                        	dist[u]+graph[u][v] < dist[v]) 
                    			dist[v] = dist[u] + graph[u][v]; 
        } 
  return dist[destination]; // Returns the shortest travel time
 
    } 
  
    public static void main (String[] args) 
    { 
        //Adjacency matrix representation 2D array
		int graph[][] = new int[][] {
				{ 0, 2, 0, 3, 2, 0, 0, 0, 2, 3, 3, 3, 2, 1, 0, 0, 2, 1, 0, 2, 2, 3, 1, 3, 3, 2, 2, 2, 2, 0, 1, 2, 3, 0,
						3, 1, 2, 0, 2, 0, 1, 2, 0, 2, 3, 1, 3, 3, 1, 2 },
				{ 2, 0, 2, 0, 1, 0, 2, 0, 2, 0, 2, 1, 2, 2, 2, 1, 1, 2, 3, 3, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 1, 1, 0,
						1, 0, 3, 2, 1, 0, 3, 3, 3, 3, 0, 1, 3, 1, 3, 1 },
				{ 0, 2, 0, 1, 2, 2, 2, 0, 0, 0, 3, 2, 2, 0, 2, 1, 0, 3, 3, 0, 2, 0, 3, 2, 2, 2, 3, 3, 2, 0, 0, 0, 2, 3,
						2, 2, 0, 2, 1, 3, 3, 1, 3, 2, 0, 0, 0, 1, 3, 1 },
				{ 3, 0, 1, 0, 2, 0, 1, 1, 2, 2, 2, 0, 3, 0, 2, 3, 1, 2, 2, 3, 2, 2, 3, 1, 0, 0, 2, 3, 2, 3, 0, 3, 3, 3,
						0, 1, 0, 3, 0, 3, 0, 3, 0, 2, 0, 0, 1, 1, 2, 0 },
				{ 2, 1, 2, 2, 0, 2, 0, 0, 0, 3, 0, 2, 0, 0, 2, 2, 3, 2, 3, 2, 2, 1, 2, 1, 2, 3, 2, 0, 3, 1, 2, 2, 3, 2,
						0, 3, 3, 3, 1, 2, 2, 2, 3, 3, 0, 3, 3, 3, 0, 2 },
				{ 0, 0, 2, 0, 2, 0, 2, 0, 1, 1, 2, 0, 0, 3, 1, 0, 0, 2, 1, 3, 0, 0, 0, 1, 2, 2, 1, 0, 2, 2, 0, 0, 2, 1,
						1, 1, 3, 1, 3, 2, 3, 3, 3, 0, 3, 3, 1, 0, 1, 0 },
				{ 0, 2, 2, 1, 0, 2, 0, 3, 1, 0, 1, 2, 0, 2, 2, 1, 1, 1, 2, 3, 3, 1, 1, 0, 2, 3, 3, 0, 2, 3, 3, 3, 3, 1,
						3, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 1, 3, 2, 0, 3 },
				{ 0, 0, 0, 1, 0, 0, 3, 0, 3, 3, 2, 3, 0, 3, 3, 2, 2, 2, 0, 2, 1, 2, 1, 1, 0, 1, 1, 1, 1, 3, 0, 1, 3, 3,
						0, 2, 1, 3, 3, 3, 0, 0, 0, 3, 3, 0, 3, 3, 0, 2 },
				{ 2, 2, 0, 2, 0, 1, 1, 3, 0, 3, 1, 0, 2, 2, 1, 1, 0, 0, 3, 0, 3, 1, 1, 0, 2, 3, 1, 0, 2, 2, 1, 0, 1, 2,
						0, 2, 3, 3, 2, 3, 2, 2, 3, 0, 3, 3, 2, 1, 2, 0 },
				{ 3, 0, 0, 2, 3, 1, 0, 3, 3, 0, 3, 0, 2, 0, 3, 1, 1, 0, 1, 3, 3, 1, 1, 2, 2, 3, 1, 0, 3, 1, 3, 3, 3, 1,
						1, 2, 2, 1, 0, 0, 0, 1, 0, 2, 1, 1, 0, 3, 3, 3 },
				{ 3, 2, 3, 2, 0, 2, 1, 2, 1, 3, 0, 0, 0, 3, 1, 3, 2, 0, 3, 2, 0, 3, 0, 2, 0, 3, 2, 0, 0, 3, 3, 2, 3, 3,
						1, 1, 1, 3, 3, 2, 1, 1, 3, 3, 1, 1, 1, 2, 2, 3 },
				{ 3, 1, 2, 0, 2, 0, 2, 3, 0, 0, 0, 0, 1, 0, 3, 1, 1, 0, 0, 0, 3, 0, 1, 1, 0, 3, 0, 1, 0, 2, 0, 1, 3, 0,
						3, 1, 2, 2, 0, 2, 1, 0, 2, 3, 0, 3, 1, 1, 2, 3 },
				{ 2, 2, 2, 3, 0, 0, 0, 0, 2, 2, 0, 1, 0, 3, 1, 1, 3, 1, 1, 1, 1, 1, 0, 1, 3, 0, 0, 0, 2, 2, 3, 2, 2, 2,
						1, 1, 0, 2, 2, 3, 2, 2, 0, 1, 0, 2, 2, 2, 1, 0 },
				{ 1, 2, 0, 0, 0, 3, 2, 3, 2, 0, 3, 0, 3, 0, 2, 0, 3, 2, 0, 0, 2, 1, 1, 1, 2, 1, 1, 3, 1, 3, 1, 2, 2, 2,
						3, 1, 3, 1, 0, 2, 2, 2, 2, 3, 3, 1, 3, 0, 0, 2 },
				{ 0, 2, 2, 2, 2, 1, 2, 3, 1, 3, 1, 3, 1, 2, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 3, 0, 3, 3, 1, 0, 3, 3, 0,
						2, 0, 3, 3, 0, 3, 0, 0, 2, 3, 2, 3, 1, 1, 2, 0 },
				{ 0, 1, 1, 3, 2, 0, 1, 2, 1, 1, 3, 1, 1, 0, 0, 0, 1, 3, 1, 2, 1, 3, 1, 3, 0, 1, 1, 3, 0, 0, 0, 2, 0, 2,
						3, 2, 2, 1, 2, 1, 2, 3, 2, 3, 1, 0, 1, 3, 3, 3 },
				{ 2, 1, 0, 1, 3, 0, 1, 2, 0, 1, 2, 1, 3, 3, 0, 1, 0, 0, 0, 2, 2, 0, 3, 1, 0, 2, 0, 1, 1, 2, 3, 1, 2, 0,
						2, 2, 3, 2, 0, 3, 1, 3, 2, 0, 2, 3, 0, 2, 2, 1 },
				{ 1, 2, 3, 2, 2, 2, 1, 2, 0, 0, 0, 0, 1, 2, 1, 3, 0, 0, 0, 1, 3, 3, 1, 2, 2, 2, 2, 1, 2, 3, 1, 1, 2, 1,
						1, 2, 0, 2, 1, 3, 1, 0, 2, 0, 0, 1, 3, 0, 0, 0 },
				{ 0, 3, 3, 2, 3, 1, 2, 0, 3, 1, 3, 0, 1, 0, 1, 1, 0, 0, 0, 3, 3, 1, 0, 0, 3, 0, 0, 1, 1, 2, 1, 2, 2, 0,
						0, 2, 2, 3, 3, 3, 0, 2, 2, 2, 3, 2, 3, 0, 2, 1 },
				{ 2, 3, 0, 3, 2, 3, 3, 2, 0, 3, 2, 0, 1, 0, 0, 2, 2, 1, 3, 0, 2, 0, 0, 1, 0, 1, 0, 2, 0, 0, 1, 2, 3, 1,
						0, 2, 0, 1, 0, 3, 0, 2, 2, 2, 2, 2, 0, 1, 2, 1 },
				{ 2, 2, 2, 2, 2, 0, 3, 1, 3, 3, 0, 3, 1, 2, 0, 1, 2, 3, 3, 2, 0, 3, 0, 1, 3, 3, 1, 3, 0, 1, 1, 1, 1, 0,
						1, 3, 3, 2, 3, 1, 2, 3, 2, 1, 2, 0, 3, 0, 0, 2 },
				{ 3, 2, 0, 2, 1, 0, 1, 2, 1, 1, 3, 0, 1, 1, 1, 3, 0, 3, 1, 0, 3, 0, 1, 1, 0, 0, 3, 1, 0, 1, 3, 3, 2, 1,
						0, 3, 0, 0, 1, 3, 1, 2, 1, 3, 2, 0, 3, 0, 0, 2 },
				{ 1, 2, 3, 3, 2, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 3, 1, 0, 0, 0, 1, 0, 1, 0, 3, 1, 3, 1, 1, 3, 3, 1, 3,
						1, 3, 3, 1, 1, 3, 1, 3, 0, 1, 2, 2, 0, 1, 2, 2 },
				{ 3, 0, 2, 1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 0, 3, 1, 2, 0, 1, 1, 1, 1, 0, 2, 2, 0, 1, 1, 1, 0, 1, 0, 0,
						1, 3, 3, 3, 0, 3, 2, 2, 3, 0, 2, 1, 1, 3, 3, 2 },
				{ 3, 0, 2, 0, 2, 2, 2, 0, 2, 2, 0, 0, 3, 2, 0, 0, 0, 2, 3, 0, 3, 0, 0, 2, 0, 2, 0, 1, 2, 1, 3, 0, 2, 0,
						2, 2, 1, 3, 0, 0, 3, 3, 1, 2, 3, 3, 1, 0, 2, 0 },
				{ 2, 2, 2, 0, 3, 2, 3, 1, 3, 3, 3, 3, 0, 1, 3, 1, 2, 2, 0, 1, 3, 0, 3, 2, 2, 0, 3, 3, 3, 0, 3, 0, 0, 2,
						0, 0, 2, 1, 2, 2, 1, 2, 2, 1, 3, 1, 3, 1, 0, 2 },
				{ 2, 2, 3, 2, 2, 1, 3, 1, 1, 1, 2, 0, 0, 1, 0, 1, 0, 2, 0, 0, 1, 3, 1, 0, 0, 3, 0, 0, 0, 3, 2, 2, 0, 1,
						1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 2, 0 },
				{ 2, 2, 3, 3, 0, 0, 0, 1, 0, 0, 0, 1, 0, 3, 3, 3, 1, 1, 1, 2, 3, 1, 3, 1, 1, 3, 0, 0, 0, 1, 0, 1, 3, 3,
						3, 0, 2, 0, 3, 0, 3, 1, 0, 3, 3, 0, 3, 1, 2, 2 },
				{ 2, 0, 2, 2, 3, 2, 2, 1, 2, 3, 0, 0, 2, 1, 3, 0, 1, 2, 1, 0, 0, 0, 1, 1, 2, 3, 0, 0, 0, 3, 3, 1, 1, 0,
						2, 1, 1, 3, 2, 2, 1, 1, 1, 2, 0, 2, 1, 1, 1, 2 },
				{ 0, 0, 0, 3, 1, 2, 3, 3, 2, 1, 3, 2, 2, 3, 1, 0, 2, 3, 2, 0, 1, 1, 1, 1, 1, 0, 3, 1, 3, 0, 2, 0, 0, 3,
						0, 2, 2, 0, 3, 1, 2, 1, 0, 3, 2, 0, 2, 0, 0, 0 },
				{ 1, 2, 0, 0, 2, 0, 3, 0, 1, 3, 3, 0, 3, 1, 0, 0, 3, 1, 1, 1, 1, 3, 3, 0, 3, 3, 2, 0, 3, 2, 0, 0, 2, 0,
						2, 2, 1, 2, 2, 2, 2, 0, 3, 3, 3, 1, 1, 1, 2, 1 },
				{ 2, 1, 0, 3, 2, 0, 3, 1, 0, 3, 2, 1, 2, 2, 3, 2, 1, 1, 2, 2, 1, 3, 3, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1,
						1, 1, 0, 2, 1, 3, 2, 3, 3, 1, 1, 1, 3, 3, 2, 3 },
				{ 3, 1, 2, 3, 3, 2, 3, 3, 1, 3, 3, 3, 2, 2, 3, 0, 2, 2, 2, 3, 1, 2, 1, 0, 2, 0, 0, 3, 1, 0, 2, 0, 0, 3,
						2, 1, 1, 2, 0, 1, 3, 1, 1, 1, 3, 2, 1, 0, 3, 0 },
				{ 0, 0, 3, 3, 2, 1, 1, 3, 2, 1, 3, 0, 2, 2, 0, 2, 0, 1, 0, 1, 0, 1, 3, 0, 0, 2, 1, 3, 0, 3, 0, 1, 3, 0,
						1, 2, 2, 1, 2, 0, 1, 1, 3, 3, 3, 1, 3, 0, 1, 2 },
				{ 3, 1, 2, 0, 0, 1, 3, 0, 0, 1, 1, 3, 1, 3, 2, 3, 2, 1, 0, 0, 1, 0, 1, 1, 2, 0, 1, 3, 2, 0, 2, 1, 2, 1,
						0, 0, 0, 0, 0, 1, 3, 2, 1, 2, 2, 3, 0, 0, 2, 0 },
				{ 1, 0, 2, 1, 3, 1, 2, 2, 2, 2, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, 0, 0, 0, 1, 2, 2, 1, 1, 2,
						0, 0, 2, 0, 0, 3, 3, 0, 0, 0, 3, 0, 1, 2, 1, 2 },
				{ 2, 3, 0, 0, 3, 3, 0, 1, 3, 2, 1, 2, 0, 3, 3, 2, 3, 0, 2, 0, 3, 0, 3, 3, 1, 2, 1, 2, 1, 2, 1, 0, 1, 2,
						0, 2, 0, 0, 2, 1, 3, 1, 0, 2, 1, 1, 1, 2, 3, 0 },
				{ 0, 2, 2, 3, 3, 1, 1, 3, 3, 1, 3, 2, 2, 1, 3, 1, 2, 2, 3, 1, 2, 0, 1, 3, 3, 1, 1, 0, 3, 0, 2, 2, 2, 1,
						0, 0, 0, 0, 0, 0, 2, 2, 0, 1, 1, 0, 2, 2, 2, 3 },
				{ 2, 1, 1, 0, 1, 3, 2, 3, 2, 0, 3, 0, 2, 0, 0, 2, 0, 1, 3, 0, 3, 1, 1, 0, 0, 2, 0, 3, 2, 3, 2, 1, 0, 2,
						0, 0, 2, 0, 0, 0, 2, 3, 2, 3, 3, 3, 0, 1, 0, 1 },
				{ 0, 0, 3, 3, 2, 2, 0, 3, 3, 0, 2, 2, 3, 2, 3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 0, 2, 0, 0, 2, 1, 2, 3, 1, 0,
						1, 3, 1, 0, 0, 0, 0, 3, 2, 3, 3, 2, 0, 2, 0, 2 },
				{ 1, 3, 3, 0, 2, 3, 1, 0, 2, 0, 1, 1, 2, 2, 0, 2, 1, 1, 0, 0, 2, 1, 1, 2, 3, 1, 1, 3, 1, 2, 2, 2, 3, 1,
						3, 3, 3, 2, 2, 0, 0, 2, 3, 2, 0, 1, 3, 2, 2, 2 },
				{ 2, 3, 1, 3, 2, 3, 2, 0, 2, 1, 1, 0, 2, 2, 0, 3, 3, 0, 2, 2, 3, 2, 3, 2, 3, 2, 0, 1, 1, 1, 0, 3, 1, 1,
						2, 0, 1, 2, 3, 3, 2, 0, 3, 0, 0, 1, 3, 1, 0, 1 },
				{ 0, 3, 3, 0, 3, 3, 0, 0, 3, 0, 3, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 3, 1, 2, 1, 0, 1, 0, 3, 3, 1, 3,
						1, 0, 0, 0, 2, 2, 3, 3, 0, 3, 2, 3, 1, 0, 0, 2 },
				{ 2, 3, 2, 2, 3, 0, 1, 3, 0, 2, 3, 3, 1, 3, 3, 3, 0, 0, 2, 2, 1, 3, 1, 0, 2, 1, 0, 3, 2, 3, 3, 1, 1, 3,
						2, 0, 2, 1, 3, 3, 2, 0, 3, 0, 1, 3, 0, 2, 1, 0 },
				{ 3, 0, 0, 0, 0, 3, 2, 3, 3, 1, 1, 0, 0, 3, 2, 1, 2, 0, 3, 2, 2, 2, 2, 2, 3, 3, 1, 3, 0, 2, 3, 1, 3, 3,
						2, 3, 1, 1, 3, 3, 0, 0, 2, 1, 0, 3, 0, 2, 3, 0 },
				{ 1, 1, 0, 0, 3, 3, 1, 0, 3, 1, 1, 3, 2, 1, 3, 0, 3, 1, 2, 2, 0, 0, 2, 1, 3, 1, 0, 0, 2, 0, 1, 1, 2, 1,
						3, 0, 1, 0, 3, 2, 1, 1, 3, 3, 3, 0, 3, 3, 1, 3 },
				{ 3, 3, 0, 1, 3, 1, 3, 3, 2, 0, 1, 1, 2, 3, 1, 1, 0, 3, 3, 0, 3, 3, 0, 1, 1, 3, 0, 3, 1, 2, 1, 3, 1, 3,
						0, 1, 1, 2, 0, 0, 3, 3, 1, 0, 0, 3, 0, 1, 0, 3 },
				{ 3, 1, 1, 1, 3, 0, 2, 3, 1, 3, 2, 1, 2, 0, 1, 3, 2, 0, 0, 1, 0, 0, 1, 3, 0, 1, 1, 1, 1, 0, 1, 3, 0, 0,
						0, 2, 2, 2, 1, 2, 2, 1, 0, 2, 2, 3, 1, 0, 3, 3 },
				{ 1, 3, 3, 2, 0, 1, 0, 0, 2, 3, 2, 2, 1, 0, 2, 3, 2, 0, 2, 2, 0, 0, 2, 3, 2, 0, 2, 2, 1, 0, 2, 2, 3, 1,
						2, 1, 3, 2, 0, 0, 2, 0, 0, 1, 3, 1, 0, 3, 0, 1 },
				{ 2, 1, 1, 0, 2, 0, 3, 2, 0, 3, 3, 3, 0, 2, 0, 3, 1, 0, 1, 1, 2, 2, 2, 2, 0, 2, 0, 2, 2, 0, 1, 3, 0, 2,
						0, 2, 0, 3, 1, 2, 2, 1, 2, 0, 0, 3, 3, 3, 1, 0 }
                                 }; 

		int start[] = { 10, 13, 16, 23, 28, 30, 38, 39, 42, 53, 56, 60, 61, 63, 64, 69, 78, 82, 85, 91, 92, 92, 100, 107,
				114, 125, 127, 129, 130, 132, 135, 140, 149, 155, 158, 162, 166, 174, 182, 189, 193, 201, 202, 203, 214,
				214, 216, 219, 227, 230, 244, 247, 247, 249, 252, 255, 255, 258, 258, 262, 267, 268, 268, 272, 278, 284,
				288, 292, 293, 299, 300, 309, 313, 317, 322, 324, 325, 332, 349, 350, 359, 360, 363, 367, 371, 377, 379,
				379, 380, 380, 382, 387, 396, 397, 399, 403, 404, 406, 406, 410, 413, 417, 418, 422, 433, 441, 447, 448,
				457, 463, 463, 468, 482, 493, 504, 513, 517, 521, 523, 529, 532, 538, 540, 542, 552, 558, 564, 570, 574,
				576, 577, 578, 581, 583, 593, 594, 600, 612, 616, 616, 618, 618, 625, 631, 641, 642, 644, 645, 648, 650,
				655, 657, 658, 659, 666, 670, 671, 674, 681, 684, 684, 687, 688, 696, 698, 700, 700, 708, 709, 709, 710,
				710, 710, 713, 717, 719, 719, 721, 728, 736, 737, 738, 744, 746, 749, 752, 760, 761, 763, 768, 775, 780,
				782, 785, 788, 789, 789, 793, 797, 798, 805, 807, 812, 823, 825, 827, 827, 827, 830, 833, 833, 835, 837,
				850, 854, 857, 860, 863, 866, 872, 882, 886, 896, 898, 900, 902, 902, 906, 906, 910, 910, 915, 915, 918,
				919, 923, 925, 927, 930, 943, 954, 959, 959, 963, 973, 983, 984, 988, 989, 995, 998, 1005, 1006, 1009,
				1013, 1018, 1021, 1029, 1031, 1033, 1039, 1052, 1053, 1062, 1062, 1063, 1064, 1065, 1066, 1067, 1072,
				1075, 1076, 1078, 1083, 1089, 1091, 1093, 1101, 1105, 1114, 1114, 1115, 1115, 1120, 1122, 1123, 1124,
				1129, 1131, 1134, 1138, 1139, 1140, 1151, 1154, 1156, 1157, 1157, 1159 };
		int req[] = { 10, 26, 14, 6, 10, 7, 13, 29, 37, 38, 8, 7, 9, 22, 15, 28, 47, 13, 30, 13, 17, 34, 3, 50,
				46, 40, 5, 47, 28, 15, 1, 21, 50, 34, 28, 39, 16, 35, 19, 4, 46, 6, 38, 40, 18, 2, 1, 17, 37, 46, 24, 3,
				21, 17, 16, 15, 49, 29, 12, 46, 2, 28, 34, 47, 50, 9, 1, 7, 9, 29, 29, 38, 6, 37, 27, 24, 30, 50, 19,
				14, 17, 45, 39, 12, 33, 2, 49, 6, 8, 36, 17, 34, 6, 28, 7, 13, 29, 1, 24, 15, 13, 26, 26, 4, 25, 41, 33,
				10, 48, 48, 46, 20, 33, 42, 21, 36, 42, 34, 28, 48, 45, 7, 23, 16, 7, 17, 19, 43, 10, 5, 1, 40, 13, 18,
				41, 29, 40, 25, 23, 17, 3, 35, 1, 22, 45, 1, 26, 38, 34, 10, 50, 45, 35, 6, 44, 46, 46, 29, 21, 6, 28,
				23, 32, 11, 32, 49, 35, 45, 47, 48, 26, 9, 42, 3, 7, 47, 15, 48, 35, 34, 19, 44, 28, 16, 43, 40, 49, 49,
				31, 1, 13, 16, 12, 37, 33, 47, 28, 23, 33, 12, 3, 11, 44, 6, 49, 21, 10, 29, 21, 40, 4, 2, 43, 7, 48,
				31, 14, 35, 27, 32, 32, 37, 3, 41, 20, 9, 45, 45, 43, 30, 21, 28, 28, 36, 19, 13, 34, 2, 20, 40, 18, 29,
				16, 50, 2, 14, 26, 19, 12, 20, 41, 40, 33, 18, 17, 3, 44, 4, 35, 29, 22, 25, 34, 11, 19, 38, 6, 32, 38,
				33, 34, 30, 38, 24, 8, 16, 43, 33, 20, 46, 27, 8, 35, 40, 43, 23, 5, 7, 29, 32, 35, 21, 7, 16, 36, 11,
				37, 20, 2, 33 };
		int dest[] = { 32, 36, 41, 35, 14, 33, 39, 15, 41, 4, 46, 50, 21, 14, 13, 18, 40, 32, 38, 46, 50, 49, 24,
				24, 4, 16, 47, 35, 15, 22, 19, 26, 8, 23, 46, 5, 19, 3, 42, 41, 43, 34, 49, 30, 44, 3, 2, 11, 29, 39,
				44, 5, 43, 47, 27, 3, 45, 8, 40, 16, 33, 44, 8, 44, 44, 38, 34, 47, 20, 23, 11, 40, 44, 37, 7, 5, 5, 10,
				23, 16, 33, 38, 17, 41, 13, 31, 43, 9, 26, 36, 12, 41, 29, 49, 45, 39, 45, 17, 37, 24, 37, 29, 21, 4,
				26, 26, 26, 26, 22, 33, 37, 34, 25, 5, 41, 20, 19, 16, 21, 26, 15, 24, 2, 7, 6, 26, 47, 18, 48, 16, 12,
				6, 31, 28, 31, 40, 2, 50, 5, 46, 12, 41, 31, 14, 33, 45, 20, 44, 46, 46, 45, 11, 1, 5, 36, 16, 11, 6,
				19, 17, 31, 1, 5, 28, 49, 39, 18, 46, 48, 17, 13, 23, 38, 5, 40, 14, 7, 48, 41, 7, 37, 12, 6, 12, 41,
				10, 44, 39, 44, 2, 12, 21, 21, 12, 44, 5, 34, 13, 6, 31, 49, 38, 6, 9, 17, 5, 39, 26, 9, 30, 11, 8, 30,
				15, 25, 11, 5, 16, 11, 43, 35, 18, 34, 20, 28, 8, 34, 24, 22, 39, 6, 35, 4, 30, 19, 18, 36, 35, 40, 30,
				23, 10, 9, 44, 22, 21, 26, 28, 22, 40, 21, 11, 33, 47, 11, 40, 20, 26, 46, 21, 32, 21, 9, 44, 45, 26,
				12, 47, 11, 34, 24, 43, 2, 23, 21, 3, 47, 49, 12, 19, 33, 16, 47, 10, 36, 6, 16, 40, 8, 16, 39, 15, 32,
				37, 36, 34, 18, 38, 39, 34};
                         		

        //Supplementary data set
/*                                 
int start[] = {2,3,4,7,9,19,20,26,38,42,42,44,44,51,57,67,68,70,71,74,76,81,83,84,85,92,96,97,100,107,110,110,113,114,122,124,126,126,134,135,135,136,136,136,139,143,145,145,147,154,162,163,164,170,172,175,178,186,187,189,194,201,206,208,211,214,215,215,219,223,224,231,233,238,249,251,253,253,253,256,259,259,261,263,276,280,283,286,289,292,298,308,312,322,324,326,328,328,332,332,336,336,341,341,344,345,349,351,353,356,369,380,385,385,389,399,409,410,414,415,421,424,431,432,435,439,444,447,455,457,459,465,478,479,488,488,489,490,491,492,493,498,501,502,504,509,515,517,519,527,531,540,540,541,541,546,548,549,550,555,557,560,564,565,566,577,580,582,583,583,595,602,603,610,615,615,621,621,623,626,634,636,640,646,650,650,650,651,652,656,660,663,665,666,673,674,683,685,689,694,696,700,705,706,710,720,720,722,732,742,744,752,753,758,764,772,777,782,784,785,785,792,798,798,806,807,810,813,815,821,822,828,831,834,837,838,843,844,845,847,848,850,851,858,858,868,874,874,881,892,897,906,906,907,911,920,922,924,931,932,933,938,938,942,942,943,953,959,961,962,968,969,971,976,977,981,987,998,1004,1008,1009,1014,1018,1020,1022,1024,1027,1033,1039,1039,1040,1042,1050,1058,1065,1071,1078,1087,1091, 1095 };
int req[] = {40,25,23,17,3,35,1,22,45,1,26,38,34,10,50,45,35,6,44,46,46,29,21,6,28,23,32,11,32,49,35,45,47,48,26,9,42,3,7,47,15,48,35,34,19,44,28,16,43,40,49,49,31,1,13,16,12,37,33,47,28,23,33,12,3,11,44,6,49,21,10,29,21,40,4,2,43,7,48,31,14,35,27,32,32,37,3,41,20,9,45,45,43,30,21,28,28,36,19,13,34,2,20,40,18,29,16,50,2,14,26,19,12,20,41,40,33,18,17,3,44,4,35,29,22,25,34,11,19,38,6,32,38,33,34,30,38,24,8,16,43,33,20,46,27,8,35,40,43,23,5,7,29,32,35,21,7,16,36,11,37,20,2,33,32,36,41,35,14,33,39,15,41,4,46,50,21,14,13,18,40,32,38,46,50,49,24,24,4,16,47,35,15,22,19,26,8,23,46,5,19,3,42,41,43,34,49,30,44,3,2,11,29,39,44,5,43,47,27,3,45,8,40,16,33,44,8,44,44,38,34,47,20,23,11,40,44,37,7,5,5,10,23,16,33,38,17,41,13,31,43,9,26,36,12,41,29,49,45,39,45,17,37,24,37,29,21,4,26,26,26,26,22,33,37,34,25,5,41,20,19,16,21,26,15,24,2,7,6,26,47,18,48,16,12,6,31,28,31,40};
int dest[] = { 2,50,5,46,12,41,31,14,33,45,20,44,46,46,45,11,1,5,36,16,11,6,19,17,31,1,5,28,49,39,18,46,48,17,13,23,38,5,40,14,7,48,41,7,37,12,6,12,41,10,44,39,44,2,12,21,21,12,44,5,34,13,6,31,49,38,6,9,17,5,39,26,9,30,11,8,30,15,25,11,5,16,11,43,35,18,34,20,28,8,34,24,22,39,6,35,4,30,19,18,36,35,40,30,23,10,9,44,22,21,26,28,22,40,21,11,33,47,11,40,20,26,46,21,32,21,9,44,45,26,12,47,11,34,24,43,2,23,21,3,47,49,12,19,33,16,47,10,36,6,16,40,8,16,39,15,32,37,36,34,18,38,39,34,10,16,16,50,40,36,42,19,42,39,33,2,50,39,17,3,24,29,27,13,41,38,36,42,17,25,50,48,8,50,32,5,23,16,23,14,12,48,43,45,47,48,4,46,44,1,13,47,24,23,4,26,20,18,1,39,49,19,22,44,5,48,27,17,25,36,10,29,31,8,48,11,44,12,23,46,30,2,14,13,11,34,28,11,50,2,33,5,20,17,5,14,45,34,25,24,28,17,10,6,30,19,4,17,30,26,40,42,45,29,2,48,45,8,34,3,44,29,16,6,3,49,5,33,19,28,43,40,37,29,20,44,38,4,3,43};
*/                         		
		
		int end1 = 0; // Time driver finishes dropping off passenger
		int end2 = 0; // i.e. when the driver finishes "work"

		int driver1Time = 0; // compare which driver can get to location fastest
		int driver2Time = 0; // Useful for situations where a driver who's already working can get to the
								// next location faster
		int totalWaitTime = 0;

		D1 D1 = new D1(); // Declare Driver 1 object
		D2 D2 = new D2(); // Declare Driver 2 object

		D1.Loc = 0;	//Set location for driver1
		D2.Loc = 0; //Set location for driver2
		
		// 300 requests
		for (int i = 0; i < 300; i++) {
			// Time request occurred + time to get to request location
			driver1Time = Math.max(end1, start[i]) + dijk(graph, D1.Loc, req[i] - 1);
			driver2Time = Math.max(end2, start[i]) + dijk(graph, D2.Loc, req[i] - 1);

			if (driver1Time <= driver2Time) { // If this statement is true, give job to Car 1
				D1.Loc = (dest[i] - 1); // Set new location for driver 1
				end1 = driver1Time + dijk(graph, D1.Loc, req[i] - 1); // Update end time for driver 1
																		// Essentially when driver 1 is done dropping
																		// off the passenger
				totalWaitTime += driver1Time - start[i]; // driver1Time minus the request start time is added onto
															// totalWaitTime
				
				System.out.println("Current total wait time: " + totalWaitTime);

			} else {
				D2.Loc = (dest[i] - 1); // If the first case is false, give job to Car 2
				end2 = driver2Time + dijk(graph, D2.Loc, req[i] - 1); // Update end time for driver 2
																		// Essentially when driver 2 is done dropping
																		// off the passenger
				totalWaitTime += driver2Time - start[i]; // driver2Time minus the request start time is added onto
															// totalWaitTime
				
				System.out.println("Current total wait time: " + totalWaitTime);
			}

		}
		System.out.println("Total wait time: " + totalWaitTime); // Print total wait time after for loop exits
	}
}